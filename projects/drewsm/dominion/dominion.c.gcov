        -:    0:Source:dominion.c
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
     2004:  311:int numHandCards(struct gameState *state) {
     2004:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    13932:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    13932:  326:  int count = 0;
        -:  327:
    47952:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    34020:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    48762:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    34830:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    43092:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    29160:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    13932:  343:  return count;
        -:  344:}
        -:  345:
     2004:  346:int whoseTurn(struct gameState *state) {
     2004:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
      113:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      113:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      112:  401:  j = 0;
     2912:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     2800:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      236:  406:	  j++;
        -:  407:	}
        -:  408:    }
      112:  409:  if ( j >= 3)
        -:  410:    {
       43:  411:      return 1;
        -:  412:    }
        -:  413:
       69:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525://draws 1 card, shuffling the discard pile 1st, if needed
    #####:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
    #####:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    #####:  534:    for (i = 0; i < state->discardCount[player];i++){
    #####:  535:      state->deck[player][i] = state->discard[player][i];
    #####:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
    #####:  539:    state->deckCount[player] = state->discardCount[player];
    #####:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
    #####:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
    #####:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
    #####:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
    #####:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
    #####:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
    #####:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:    state->deckCount[player]--;
    #####:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
    #####:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
    #####:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  577:    state->deckCount[player]--;
    #####:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
    #####:  581:  return 0;
        -:  582:}
        -:  583:
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
    #####:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
    #####:  654:  int currentPlayer = whoseTurn(state);
    #####:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
    #####:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
    #####:  659:  int drawntreasure=0;
        -:  660:  int cardDrawn;
    #####:  661:  int z = 0;// this is the counter for the temp hand
    #####:  662:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  663:    nextPlayer = 0;
        -:  664:  }
        -:  665:  
        -:  666:  int result;   //return value from my refactored functions (drewsm)
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
        -:  670:    {
        -:  671:    //Adventurer is one of the cards I chose in Assignment1
        -:  672:     
        -:  673:			
        -:  674:    case council_room:
        -:  675:      //+4 Cards
    #####:  676:      for (i = 0; i < 4; i++)
        -:  677:	{
    #####:  678:	  drawCard(currentPlayer, state);
        -:  679:	}
        -:  680:			
        -:  681:      //+1 Buy
    #####:  682:      state->numBuys++;
        -:  683:			
        -:  684:      //Each other player draws a card
    #####:  685:      for (i = 0; i < state->numPlayers; i++)
        -:  686:	{
    #####:  687:	  if ( i != currentPlayer )
        -:  688:	    {
    #####:  689:	      drawCard(i, state);
        -:  690:	    }
        -:  691:	}
        -:  692:			
        -:  693:      //put played card in played card pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
        -:  695:			
    #####:  696:      return 0;
        -:  697:			
        -:  698:    case feast:
        -:  699:      //gain card with cost up to 5
        -:  700:      //Backup hand
    #####:  701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  704:      }
        -:  705:      //Backup hand
        -:  706:
        -:  707:      //Update Coins for Buy
    #####:  708:      updateCoins(currentPlayer, state, 5);
    #####:  709:      x = 1;//Condition to loop on
    #####:  710:      while( x == 1) {//Buy one card
    #####:  711:	if (supplyCount(choice1, state) <= 0){
        -:  712:	  if (DEBUG)
        -:  713:	    printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:	  }
        -:  718:	}
    #####:  719:	else if (state->coins < getCost(choice1)){
    #####:  720:	  printf("That card is too expensive!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:	  }
        -:  725:	}
        -:  726:	else{
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
    #####:  732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:	  x = 0;//No more buying cards
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
        -:  739:	}
        -:  740:      }     
        -:  741:
        -:  742:      //Reset Hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  744:	state->hand[currentPlayer][i] = temphand[i];
    #####:  745:	temphand[i] = -1;
        -:  746:      }
        -:  747:      //Reset Hand
        -:  748:      			
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case gardens:
    #####:  752:      return -1;
        -:  753:			
        -:  754:    case mine:
    #####:  755:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  756:
    #####:  757:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:		
    #####:  762:      if (choice2 > treasure_map || choice2 < curse)
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  768:	{
    #####:  769:	  return -1;
        -:  770:	}
        -:  771:
    #####:  772:      gainCard(choice2, state, 2, currentPlayer);
        -:  773:
        -:  774:      //discard card from hand
    #####:  775:      discardCard(handPos, currentPlayer, state, 0);
        -:  776:
        -:  777:      //discard trashed card
    #####:  778:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  779:	{
    #####:  780:	  if (state->hand[currentPlayer][i] == j)
        -:  781:	    {
    #####:  782:	      discardCard(i, currentPlayer, state, 0);			
    #####:  783:	      break;
        -:  784:	    }
        -:  785:	}
        -:  786:			
    #####:  787:      return 0;
        -:  788:			
        -:  789:    case remodel:
    #####:  790:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 0, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:
        -:  812:
    #####:  813:      return 0;
        -:  814:	
        -:  815:    
        -:  816:    //Smithy is one of the cards I chose in Assignment1
        -:  817:    case smithy:
    #####:  818:        result = smithyEffect(state, handPos, currentPlayer);
    #####:  819:        return result;
        -:  820:		
        -:  821:    case village:
        -:  822:      //+1 Card
    #####:  823:      drawCard(currentPlayer, state);
        -:  824:			
        -:  825:      //+2 Actions
    #####:  826:      state->numActions = state->numActions + 2;
        -:  827:			
        -:  828:      //discard played card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case baron:
    #####:  833:      state->numBuys++;//Increase buys by 1!
    #####:  834:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  835:	int p = 0;//Iterator for hand!
    #####:  836:	int card_not_discarded = 1;//Flag for discard set!
    #####:  837:	while(card_not_discarded){
    #####:  838:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  839:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  840:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  841:	    state->discardCount[currentPlayer]++;
    #####:  842:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  843:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  844:	    }
    #####:  845:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  846:	    state->handCount[currentPlayer]--;
    #####:  847:	    card_not_discarded = 0;//Exit the loop
        -:  848:	  }
    #####:  849:	  else if (p > state->handCount[currentPlayer]){
        -:  850:	    if(DEBUG) {
        -:  851:	      printf("No estate cards in your hand, invalid choice\n");
        -:  852:	      printf("Must gain an estate if there are any\n");
        -:  853:	    }
    #####:  854:	    if (supplyCount(estate, state) > 0){
    #####:  855:	      gainCard(estate, state, 0, currentPlayer);
    #####:  856:	      state->supplyCount[estate]--;//Decrement estates
    #####:  857:	      if (supplyCount(estate, state) == 0){
    #####:  858:		isGameOver(state);
        -:  859:	      }
        -:  860:	    }
    #####:  861:	    card_not_discarded = 0;//Exit the loop
        -:  862:	  }
        -:  863:			    
        -:  864:	  else{
    #####:  865:	    p++;//Next card
        -:  866:	  }
        -:  867:	}
        -:  868:      }
        -:  869:			    
        -:  870:      else{
    #####:  871:	if (supplyCount(estate, state) > 0){
    #####:  872:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  873:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  874:	  if (supplyCount(estate, state) == 0){
    #####:  875:	    isGameOver(state);
        -:  876:	  }
        -:  877:	}
        -:  878:      }
        -:  879:	    
        -:  880:      
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case great_hall:
        -:  884:      //+1 Card
    #####:  885:      drawCard(currentPlayer, state);
        -:  886:			
        -:  887:      //+1 Actions
    #####:  888:      state->numActions++;
        -:  889:			
        -:  890:      //discard card from hand
    #####:  891:      discardCard(handPos, currentPlayer, state, 0);
    #####:  892:      return 0;
        -:  893:
        -:  894:    //Minion is one of the cards I chose in Assignment1
        -:  895:    case minion:
    #####:  896:        result = minionEffect(choice1, choice2, state, handPos, currentPlayer);
    #####:  897:        return result;
        -:  898:
        -:  899:    //Steward is one of the cards I chose in Assignment1
        -:  900:    case steward:
    #####:  901:        result = stewardEffect(choice1, choice2, choice3, state, handPos,
        -:  902:                currentPlayer);
    #####:  903:        return result;
        -:  904:		
        -:  905:    case tribute:
    #####:  906:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  907:	if (state->deckCount[nextPlayer] > 0){
    #####:  908:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  909:	  state->deckCount[nextPlayer]--;
        -:  910:	}
    #####:  911:	else if (state->discardCount[nextPlayer] > 0){
    #####:  912:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  913:	  state->discardCount[nextPlayer]--;
        -:  914:	}
        -:  915:	else{
        -:  916:	  //No Card to Reveal
        -:  917:	  if (DEBUG){
        -:  918:	    printf("No cards to reveal\n");
        -:  919:	  }
        -:  920:	}
        -:  921:      }
        -:  922:	    
        -:  923:      else{
    #####:  924:	if (state->deckCount[nextPlayer] == 0){
    #####:  925:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  926:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  927:	    state->deckCount[nextPlayer]++;
    #####:  928:	    state->discard[nextPlayer][i] = -1;
    #####:  929:	    state->discardCount[nextPlayer]--;
        -:  930:	  }
        -:  931:			    
    #####:  932:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  933:	} 
    #####:  934:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  936:	state->deckCount[nextPlayer]--;
    #####:  937:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  938:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  939:	state->deckCount[nextPlayer]--;
        -:  940:      }    
        -:  941:		       
    #####:  942:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  943:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  944:	state->playedCardCount++;
    #####:  945:	tributeRevealedCards[1] = -1;
        -:  946:      }
        -:  947:
    #####:  948:      for (i = 0; i <= 2; i ++){
    #####:  949:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  950:	  state->coins += 2;
        -:  951:	}
        -:  952:		    
    #####:  953:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  954:	  drawCard(currentPlayer, state);
    #####:  955:	  drawCard(currentPlayer, state);
        -:  956:	}
        -:  957:	else{//Action Card
    #####:  958:	  state->numActions = state->numActions + 2;
        -:  959:	}
        -:  960:      }
        -:  961:	    
    #####:  962:      return 0;
        -:  963:		
        -:  964:    case ambassador:
    #####:  965:      j = 0;		//used to check if player has enough cards to discard
        -:  966:
    #####:  967:      if (choice2 > 2 || choice2 < 0)
        -:  968:	{
    #####:  969:	  return -1;				
        -:  970:	}
        -:  971:
    #####:  972:      if (choice1 == handPos)
        -:  973:	{
    #####:  974:	  return -1;
        -:  975:	}
        -:  976:
    #####:  977:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  978:	{
    #####:  979:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  980:	    {
    #####:  981:	      j++;
        -:  982:	    }
        -:  983:	}
    #####:  984:      if (j < choice2)
        -:  985:	{
    #####:  986:	  return -1;				
        -:  987:	}
        -:  988:
        -:  989:      if (DEBUG) 
        -:  990:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  991:
        -:  992:      //increase supply count for choosen card by amount being discarded
    #####:  993:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  994:			
        -:  995:      //each other player gains a copy of revealed card
    #####:  996:      for (i = 0; i < state->numPlayers; i++)
        -:  997:	{
    #####:  998:	  if (i != currentPlayer)
        -:  999:	    {
    #####: 1000:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1001:	    }
        -: 1002:	}
        -: 1003:
        -: 1004:      //discard played card from hand
    #####: 1005:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1006:
        -: 1007:      //trash copies of cards returned to supply
    #####: 1008:      for (j = 0; j < choice2; j++)
        -: 1009:	{
    #####: 1010:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1011:	    {
    #####: 1012:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1013:		{
    #####: 1014:		  discardCard(i, currentPlayer, state, 1);
    #####: 1015:		  break;
        -: 1016:		}
        -: 1017:	    }
        -: 1018:	}			
        -: 1019:
    #####: 1020:      return 0;
        -: 1021:		
        -: 1022:    case cutpurse:
        -: 1023:
    #####: 1024:      updateCoins(currentPlayer, state, 2);
    #####: 1025:      for (i = 0; i < state->numPlayers; i++)
        -: 1026:	{
    #####: 1027:	  if (i != currentPlayer)
        -: 1028:	    {
    #####: 1029:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1030:		{
    #####: 1031:		  if (state->hand[i][j] == copper)
        -: 1032:		    {
    #####: 1033:		      discardCard(j, i, state, 0);
    #####: 1034:		      break;
        -: 1035:		    }
    #####: 1036:		  if (j == state->handCount[i])
        -: 1037:		    {
    #####: 1038:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1039:			{
        -: 1040:			  if (DEBUG)
        -: 1041:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1042:			}	
    #####: 1043:		      break;
        -: 1044:		    }		
        -: 1045:		}
        -: 1046:					
        -: 1047:	    }
        -: 1048:				
        -: 1049:	}				
        -: 1050:
        -: 1051:      //discard played card from hand
    #####: 1052:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1053:
    #####: 1054:      return 0;
        -: 1055:
        -: 1056:    //Embargo is one of the cards I chose in Assignment1
        -: 1057:    case embargo:
    #####: 1058:        result = embargoEffect(choice1, state, handPos, currentPlayer);
    #####: 1059:        return result;
        -: 1060:		
        -: 1061:    case outpost:
        -: 1062:      //set outpost flag
    #####: 1063:      state->outpostPlayed++;
        -: 1064:			
        -: 1065:      //discard card
    #####: 1066:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1067:      return 0;
        -: 1068:		
        -: 1069:    case salvager:
        -: 1070:      //+1 buy
    #####: 1071:      state->numBuys++;
        -: 1072:			
    #####: 1073:      if (choice1)
        -: 1074:	{
        -: 1075:	  //gain coins equal to trashed card
    #####: 1076:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1077:	  //trash card
    #####: 1078:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1079:	}
        -: 1080:			
        -: 1081:      //discard card
    #####: 1082:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1083:      return 0;
        -: 1084:		
        -: 1085:    case sea_hag:
    #####: 1086:      for (i = 0; i < state->numPlayers; i++){
    #####: 1087:	if (i != currentPlayer){
    #####: 1088:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1089:	  state->discardCount[i]++;
    #####: 1090:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1091:	}
        -: 1092:      }
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case treasure_map:
        -: 1096:      //search hand for another treasure_map
    #####: 1097:      index = -1;
    #####: 1098:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1099:	{
    #####: 1100:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1101:	    {
    #####: 1102:	      index = i;
    #####: 1103:	      break;
        -: 1104:	    }
        -: 1105:	}
    #####: 1106:      if (index > -1)
        -: 1107:	{
        -: 1108:	  //trash both treasure cards
    #####: 1109:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1110:	  discardCard(index, currentPlayer, state, 1);
        -: 1111:
        -: 1112:	  //gain 4 Gold cards
    #####: 1113:	  for (i = 0; i < 4; i++)
        -: 1114:	    {
    #####: 1115:	      gainCard(gold, state, 1, currentPlayer);
        -: 1116:	    }
        -: 1117:				
        -: 1118:	  //return success
    #####: 1119:	  return 1;
        -: 1120:	}
        -: 1121:			
        -: 1122:      //no second treasure_map found in hand
    #####: 1123:      return -1;
        -: 1124:    }
        -: 1125:	
    #####: 1126:  return -1;
        -: 1127:}
        -: 1128:
    #####: 1129:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1130:{	
        -: 1131:  //if card is not trashed, added to Played pile 
    #####: 1132:  if (trashFlag < 1)
        -: 1133:    {
        -: 1134:      //add card to played pile
    #####: 1135:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1136:      state->playedCardCount++;
        -: 1137:    }
        -: 1138:	
        -: 1139:  //set played card to -1
    #####: 1140:  state->hand[currentPlayer][handPos] = -1;
        -: 1141:	
        -: 1142:  //remove card from player's hand
        -: 1143:  //last card in hand array is played
    #####: 1144:  if ( handPos == (state->handCount[currentPlayer] - 1) )
        -: 1145:    {
        -: 1146:      //reduce number of cards in hand
    #####: 1147:      state->handCount[currentPlayer]--;
        -: 1148:    }
    #####: 1149:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1150:    {
        -: 1151:      //reduce number of cards in hand
    #####: 1152:      state->handCount[currentPlayer]--;
        -: 1153:    }
        -: 1154:  else 	
        -: 1155:    {
        -: 1156:      //replace discarded card with last card in hand
    #####: 1157:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1158:      //set last card to -1
    #####: 1159:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1160:      //reduce number of cards in hand
    #####: 1161:      state->handCount[currentPlayer]--;
        -: 1162:    }
        -: 1163:	
    #####: 1164:  return 0;
        -: 1165:}
        -: 1166:
    #####: 1167:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1168:{
        -: 1169:  //Note: supplyPos is enum of choosen card
        -: 1170:	
        -: 1171:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1172:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1173:    {
    #####: 1174:      return -1;
        -: 1175:    }
        -: 1176:	
        -: 1177:  //added card for [whoseTurn] current player:
        -: 1178:  // toFlag = 0 : add to discard
        -: 1179:  // toFlag = 1 : add to deck
        -: 1180:  // toFlag = 2 : add to hand
        -: 1181:
    #####: 1182:  if (toFlag == 1)
        -: 1183:    {
    #####: 1184:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1185:      state->deckCount[player]++;
        -: 1186:    }
    #####: 1187:  else if (toFlag == 2)
        -: 1188:    {
    #####: 1189:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1190:      state->handCount[player]++;
        -: 1191:    }
        -: 1192:  else
        -: 1193:    {
    #####: 1194:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1195:      state->discardCount[player]++;
        -: 1196:    }
        -: 1197:	
        -: 1198:  //decrease number in supply pile
    #####: 1199:  state->supplyCount[supplyPos]--;
        -: 1200:	 
    #####: 1201:  return 0;
        -: 1202:}
        -: 1203:
       12: 1204:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1205:{
        -: 1206:  int i;
        -: 1207:	
        -: 1208:  //reset coin count
       12: 1209:  state->coins = 0;
        -: 1210:
        -: 1211:  //add coins for each Treasure card in player's hand
      132: 1212:  for (i = 0; i < state->handCount[player]; i++)
        -: 1213:    {
      120: 1214:      if (state->hand[player][i] == copper)
        -: 1215:	{
       12: 1216:	  state->coins += 1;
        -: 1217:	}
      108: 1218:      else if (state->hand[player][i] == silver)
        -: 1219:	{
        8: 1220:	  state->coins += 2;
        -: 1221:	}
      100: 1222:      else if (state->hand[player][i] == gold)
        -: 1223:	{
        4: 1224:	  state->coins += 3;
        -: 1225:	}	
        -: 1226:    }	
        -: 1227:
        -: 1228:  //add bonus
       12: 1229:  state->coins += bonus;
        -: 1230:
       12: 1231:  return 0;
        -: 1232:}
        -: 1233:
        -: 1234://My functions added in for Assignment 2
        -: 1235:
        -: 1236:/*******************************************************************************
        -: 1237: * Function: adventurerEffect
        -: 1238: * Description: Executes effects of playing the Adventurer card
        -: 1239: * Parameters: struct gameState *state - tracks critical aspects of the game
        -: 1240: *             int currentPlayer - specifies which player is current
        -: 1241: *
        -: 1242: * Pre-Conditions:  *state contains a valid game state
        -: 1243: * Post-Conditions: currentPlayer deck has been shuffled, if needed.
        -: 1244: *                  2 treasure cards from currentPlayer deck are added to the
        -: 1245: *                      player hand.
        -: 1246: *                  Other drawn cards are moved to player discard pile
        -: 1247:*******************************************************************************/
    #####: 1248:int adventurerEffect(struct gameState *state, int currentPlayer) {
    #####: 1249:    int drawntreasure=0;
        -: 1250:    int cardDrawn;
        -: 1251:    int temphand[MAX_HAND];
    #####: 1252:    int z = 0;// this is the counter for the temp hand
    #####: 1253:    while(drawntreasure<2){
        -: 1254:        //if the deck is empty we need to shuffle discard and add to deck
    #####: 1255:        if (state->deckCount[currentPlayer] <1){
    #####: 1256:          shuffle(currentPlayer, state);
        -: 1257:        }
    #####: 1258:        drawCard(currentPlayer, state);
        -: 1259:        //top card of hand is most recently drawn card.
    #####: 1260:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
    #####: 1261:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1262:          drawntreasure++;
        -: 1263:        else{
    #####: 1264:          temphand[z]=cardDrawn;
        -: 1265:          //this should just remove the top card (the most recently drawn one).
    #####: 1266:          state->handCount[currentPlayer]--;
        -: 1267:          //BUG: commenting out the following line should mess up discarding
        -: 1268:          //z++;
        -: 1269:        }
        -: 1270:    }
    #####: 1271:    while(z-1>=0){
        -: 1272:        // discard all cards in play that have been drawn
    #####: 1273:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    #####: 1274:        z=z-1;
        -: 1275:    }
    #####: 1276:    return 0;
        -: 1277:}
        -: 1278:
        -: 1279:/*******************************************************************************
        -: 1280: * Function: minionEffect
        -: 1281: * Description: Executes effects of playing the Minion card
        -: 1282: * Parameters:  int choice1 - indicates if player chose 1st card effect
        -: 1283: *              int choice2 - indicates if player chose 2nd card effect
        -: 1284: *              struct gameState *state - tracks critical aspects of the game
        -: 1285: *              int currentPlayer - specifies which player is current
        -: 1286: *
        -: 1287: * Pre-Conditions:  *state contains a valid game state.
        -: 1288: *                  Player has specified valid choices.
        -: 1289: * Post-Conditions: Either Player has received +2 Coins, or
        -: 1290: *                  Player hand is discarded and 4 new cards added,
        -: 1291: *                  dependent on the values of choice1 and choice2
        -: 1292:*******************************************************************************/
    #####: 1293:int minionEffect(int choice1, int choice2, struct gameState *state,
        -: 1294:        int handPos, int currentPlayer) {
        -: 1295:    int i, j;
        -: 1296:    //+1 action
    #####: 1297:    state->numActions++;
        -: 1298:
        -: 1299:    //discard card from hand
    #####: 1300:    discardCard(handPos, currentPlayer, state, 0);
        -: 1301:
    #####: 1302:    if (choice1)		//+2 coins
        -: 1303:      {
    #####: 1304:        state->coins = state->coins + 2;
        -: 1305:      }
        -: 1306:    // else, discard hand, redraw 4,
        -: 1307:    // other players with 5+ cards discard hand and draw 4
        -: 1308:    //BUG: changing 'else if' to just 'if' which could allow a player to select
        -: 1309:    //      both the first and second effects
        -: 1310:    //else if (choice2)
    #####: 1311:    if (choice2)
        -: 1312:      {
        -: 1313:        //discard hand
    #####: 1314:        while(numHandCards(state) > 0)
        -: 1315:          {
    #####: 1316:            discardCard(handPos, currentPlayer, state, 0);
        -: 1317:          }
        -: 1318:
        -: 1319:        //draw 4
    #####: 1320:        for (i = 0; i < 4; i++)
        -: 1321:          {
    #####: 1322:            drawCard(currentPlayer, state);
        -: 1323:          }
        -: 1324:
        -: 1325:        //other players discard hand and redraw if hand size > 4
    #####: 1326:        for (i = 0; i < state->numPlayers; i++)
        -: 1327:          {
    #####: 1328:            if (i != currentPlayer)
        -: 1329:              {
    #####: 1330:                if ( state->handCount[i] > 4 )
        -: 1331:                  {
        -: 1332:                    //discard hand
    #####: 1333:                    while( state->handCount[i] > 0 )
        -: 1334:                      {
    #####: 1335:                        discardCard(handPos, i, state, 0);
        -: 1336:                      }
        -: 1337:
        -: 1338:                    //draw 4
    #####: 1339:                    for (j = 0; j < 4; j++)
        -: 1340:                      {
    #####: 1341:                        drawCard(i, state);
        -: 1342:                      }
        -: 1343:                  }
        -: 1344:              }
        -: 1345:          }
        -: 1346:
        -: 1347:      }
    #####: 1348:    return 0;
        -: 1349:}
        -: 1350:
        -: 1351:/*******************************************************************************
        -: 1352: * Function: smithyEffect
        -: 1353: * Description: Executes effects of playing the Smithy card
        -: 1354: * Parameters:  struct gameState *state - tracks critical aspects of the game
        -: 1355: *              int handPos - Position in Player hand of card being played
        -: 1356: *              int currentPlayer - specifies which player is current
        -: 1357: *
        -: 1358: * Pre-Conditions:  *state contains a valid game state.
        -: 1359: *                  Player has specified valid choices.
        -: 1360: * Post-Conditions: 3 cards are added to Player hand from their deck, and
        -: 1361: *                  the Smithy card is discarded from the hand
        -: 1362:*******************************************************************************/
    #####: 1363:int smithyEffect(struct gameState *state, int handPos, int currentPlayer) {
        -: 1364:    int i;
        -: 1365:    
        -: 1366:    //+3 Cards
    #####: 1367:    for (i = 0; i < 3; i++)
        -: 1368:      {
    #####: 1369:        drawCard(currentPlayer, state);
        -: 1370:      }
        -: 1371:
        -: 1372:    //discard card from hand
        -: 1373:    //BUG: changing the parameter passed as trashFlag
        -: 1374:    //discardCard(handPos, currentPlayer, state, 0);
    #####: 1375:    discardCard(handPos, currentPlayer, state, i);
    #####: 1376:    return 0;
        -: 1377:}
        -: 1378:
        -: 1379:/*******************************************************************************
        -: 1380: * Function: stewardEffect
        -: 1381: * Description: Executes effects of playing the Steward card
        -: 1382: * Parameters:  int choice1 - indicates if player chose 1st card effect
        -: 1383: *              int choice2 - indicates if player chose 2nd card effect
        -: 1384: *              int choice3 - indicates if player chose 3rd card effect
        -: 1385: *              struct gameState *state - tracks critical aspects of the game
        -: 1386: *              int handPos - Position in Player hand of card being played
        -: 1387: *              int currentPlayer - specifies which player is current
        -: 1388: *
        -: 1389: * Pre-Conditions:  *state contains a valid game state.
        -: 1390: *                  Player has specified valid choices.
        -: 1391: * Post-Conditions: Either - 2 cards are added to Player hand, or
        -: 1392: *                  Player receives +2 Coin, or
        -: 1393: *                  2 cards from Player hand are trashed
        -: 1394:*******************************************************************************/
    #####: 1395:int stewardEffect(int choice1, int choice2, int choice3,
        -: 1396:        struct gameState *state, int handPos, int currentPlayer) {
    #####: 1397:    if (choice1 == 1) {
        -: 1398:        //+2 cards
    #####: 1399:        drawCard(currentPlayer, state);
    #####: 1400:        drawCard(currentPlayer, state);
        -: 1401:    }
    #####: 1402:    else if (choice1 == 2) {
        -: 1403:        //+2 coins
    #####: 1404:        state->coins = state->coins + 2;
        -: 1405:    }
        -: 1406:    else {
        -: 1407:        //trash 2 cards in hand
    #####: 1408:        discardCard(choice2, currentPlayer, state, 1);
    #####: 1409:        discardCard(choice3, currentPlayer, state, 1);
        -: 1410:    }
        -: 1411:
        -: 1412:    //discard card from hand
        -: 1413:    //BUG: removing the call to discardCard below
        -: 1414:    //discardCard(handPos, currentPlayer, state, 0);
    #####: 1415:    return 0;
        -: 1416:}
        -: 1417:
        -: 1418:/*******************************************************************************
        -: 1419: * Function: embargoEffect
        -: 1420: * Description: Executes effects of playing the Embargo card
        -: 1421: * Parameters:  int choice1 - indicates which Supply pile Player wants to embargo
        -: 1422: *              struct gameState *state - tracks critical aspects of the game
        -: 1423: *              int handPos - Position in Player hand of card being played
        -: 1424: *              int currentPlayer - specifies which player is current
        -: 1425: *
        -: 1426: * Pre-Conditions:  *state contains a valid game state.
        -: 1427: *                  Player has specified valid choices.
        -: 1428: * Post-Conditions: Player receives +2 Coin,
        -: 1429: *                  the Embargo card is trashed, and
        -: 1430: *                  an Embargo token is added to the chosen Supply pile, if
        -: 1431: *                      that Supply pile is in play
        -: 1432:*******************************************************************************/
    #####: 1433:int embargoEffect(int choice1, struct gameState *state, int handPos,
        -: 1434:        int currentPlayer) {
        -: 1435:    //+2 Coins
    #####: 1436:    state->coins = state->coins + 2;
        -: 1437:
        -: 1438:    //see if selected pile is in play
    #####: 1439:    if ( state->supplyCount[choice1] == -1 )
        -: 1440:      {
    #####: 1441:        return -1;
        -: 1442:      }
        -: 1443:
        -: 1444:    //add embargo token to selected supply pile
    #####: 1445:    state->embargoTokens[choice1]++;
        -: 1446:
        -: 1447:    //trash card
    #####: 1448:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1449:    return 0;
        -: 1450:}
        -: 1451:
        -: 1452://end of dominion.c
